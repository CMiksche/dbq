// Copyright 2019 PJ Engineering and Business Solutions Pty. Ltd. All rights reserved.

package dbq

import (
	"errors"
	"fmt"
	"reflect"
	"strings"
	"time"

	"cloud.google.com/go/civil"
)

// Database is used to set the Database.
// Different databases have different syntax for placeholders etc.
type Database int

const (
	// MySQL database
	MySQL Database = 0
	// PostgreSQL database
	PostgreSQL Database = 1
)

// INSERT will generate an INSERT statement.
func INSERT(tableName string, columns []string, rows int, dbtype ...Database) string {
	return fmt.Sprintf("INSERT INTO %s ( %s ) VALUES %s", tableName, strings.Join(columns, ","), Ph(len(columns), rows, 0, dbtype...))
}

// Ph generates the placeholders for SQL queries.
// For a bulk insert operation, rows is the number of rows you intend
// to insert, and columnsN is the number of fields per row.
// For the IN function, set rows to 1.
// For PostgreSQL, you can use incr to increment the placeholder starting count.
// NOTE: The function panics if either columnsN or rows is 0.
func Ph(columnsN, rows int, incr int, dbtype ...Database) string {

	var typ Database
	if len(dbtype) > 0 {
		typ = dbtype[0]
	}

	if columnsN == 0 {
		panic(errors.New("columnsN must not be 0"))
	}

	if rows == 0 {
		panic(errors.New("rows must not be 0"))
	}

	if typ == MySQL {
		inner := "( " + strings.TrimSuffix(strings.Repeat("?,", columnsN), ",") + " ),"
		return strings.TrimSuffix(strings.Repeat(inner, rows), ",")
	}

	var singleValuesStr string

	varCount := 1 + incr
	for i := 1; i <= rows; i++ {
		singleValuesStr = singleValuesStr + "("
		for j := 1; j <= columnsN; j++ {
			singleValuesStr = singleValuesStr + fmt.Sprintf("$%d,", varCount)
			varCount++
		}
		singleValuesStr = strings.TrimSuffix(singleValuesStr, ",") + "),"
	}

	return strings.TrimSuffix(singleValuesStr, ",")
}

func sliceConv(arg reflect.Value) []interface{} {
	out := []interface{}{}

	if arg.Kind() == reflect.Slice {
		for i := 0; i < arg.Len(); i++ {
			out = append(out, sliceConv(reflect.ValueOf(arg.Index(i).Interface()))...)
		}
	} else {
		out = append(out, arg.Interface())
	}

	return out
}

// StdTimeConversionConfig provides a standard configuration for unmarshaling to
// time-related fields in a struct. It properly converts timestamps and datetime columns into
// time.Time objects. It assumes a MySQL database as default.
func StdTimeConversionConfig(dbtype ...Database) *StructorConfig {

	layouts := []string{
		"2006-01-02 15:04:05", // MySQL
		time.RFC3339,          // PostgreSQL
	}

	if len(dbtype) > 0 && dbtype[0] == PostgreSQL {
		// Swap preferences
		layouts[0], layouts[1] = layouts[1], layouts[0]
	}

	return &StructorConfig{
		WeaklyTypedInput: true,
		DecodeHook: func(f reflect.Type, t reflect.Type, data interface{}) (interface{}, error) {
			if f.Kind() != reflect.String {
				return data, nil
			}

			switch t {
			case reflect.TypeOf(civil.Date{}):
				return civil.ParseDate(data.(string))
			case reflect.TypeOf(civil.DateTime{}):
				t, err := time.Parse(layouts[0], data.(string))
				if err != nil {
					t, err = time.Parse(layouts[1], data.(string))
					if err != nil {
						return nil, err
					}
				}
				return civil.DateTime{
					Date: civil.DateOf(t),
					Time: civil.TimeOf(t),
				}, nil
			case reflect.TypeOf(civil.Time{}):
				return civil.ParseTime(data.(string))
			case reflect.TypeOf(time.Time{}):
				t, err := time.Parse(layouts[0], data.(string))
				if err != nil {
					t, err := time.Parse(layouts[1], data.(string))
					if err != nil {
						return nil, err
					}
					return t, nil
				}
				return t, nil
			default:
				return data, nil
			}

			return data, nil
		},
	}
}
